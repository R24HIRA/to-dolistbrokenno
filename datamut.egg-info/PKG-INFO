Metadata-Version: 2.4
Name: datamut
Version: 0.1.0
Summary: Production-grade tool for scanning Python code for data mutation operations
Author: datamut contributors
License: MIT
Keywords: static-analysis,data-mutation,pandas,numpy,sql,audit
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: libcst>=1.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: typer>=0.9.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: sqlparse>=0.4.0
Requires-Dist: rich>=13.0.0
Requires-Dist: pyyaml>=6.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"

# DataMut

**Production-grade tool for scanning Python code for data mutation operations**

DataMut is a static analysis tool that scans Python code (and inline SQL strings) for potential data-mutation operations, assigns severity levels, and generates interactive HTML reports. It's designed for data engineers, analysts, and auditors who need to understand how their code modifies data.

## 🚀 Features

- **Static Analysis**: Pure static analysis with no external AI or network calls
- **Multiple Libraries**: Built-in support for pandas, numpy, and SQL operations
- **Configurable Rules**: YAML-based rule bundles that auditors can edit without code changes
- **Multiple Output Formats**: HTML (interactive), JSON, and SARIF for CI/CD integration
- **Extensible**: Plugin system for adding support for additional libraries
- **Rich CLI**: Beautiful command-line interface with progress indicators and colored output
- **Severity Escalation**: Smart severity escalation based on function arguments (e.g., `inplace=True`)

## 📦 Installation

```bash
pip install datamut
```

## 🔧 Quick Start

### Basic Usage

```bash
# Analyze a single file
datamut audit my_script.py

# Analyze a directory
datamut audit src/

# Generate JSON report
datamut audit src/ --format json --output report.json

# Set minimum severity for exit code
datamut audit src/ --min-severity HIGH
```

### Example Output

```bash
$ datamut audit examples/
DataMut - Data Mutation Analysis Tool
Analyzing 1 input path(s)...
⠋ Loaded 3 rule bundles
⠋ Found 5 Python files
⠋ Analyzing files... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100%
⠋ Report saved to datamut-report.html

Analysis Complete!
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┓
┃ Metric              ┃ Count ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━┩
│ Total Findings      │ 12    │
│ Files Analyzed      │ 5     │
│ Files with Findings │ 3     │
│ CRITICAL Severity   │ 2     │
│ HIGH Severity       │ 4     │
│ MEDIUM Severity     │ 6     │
└─────────────────────┴───────┘

Report saved to: datamut-report.html
```

## 📊 Interactive HTML Report

The HTML report includes:

- **Summary Dashboard**: Overview statistics with severity breakdown
- **Interactive Filtering**: Search, filter by severity, library, or mutation type
- **Code Snippets**: Syntax-highlighted code with mutation context
- **Detailed Notes**: Hover tooltips with explanations and recommendations
- **Responsive Design**: Works on desktop and mobile devices

![HTML Report Screenshot](docs/screenshot.png)

## 🎯 Supported Operations

### Pandas
- `drop()`, `drop_duplicates()`, `dropna()` - Data removal operations
- `merge()`, `join()`, `concat()` - Data combination operations  
- `fillna()`, `replace()` - Data modification operations
- `pivot()`, `melt()`, `transpose()` - Data reshaping operations
- And many more...

### NumPy
- `delete()`, `insert()`, `append()` - Array modification
- `reshape()`, `resize()`, `transpose()` - Shape manipulation
- `concatenate()`, `split()`, `stack()` - Array combination/splitting
- `sort()`, `unique()`, `compress()` - Data reordering/filtering
- And many more...

### SQL
- `INSERT`, `UPDATE`, `DELETE` - Data modification
- `DROP`, `TRUNCATE`, `ALTER` - Schema/data destruction
- `MERGE`, `UPSERT`, `REPLACE` - Complex operations
- Detected in string literals within Python code

## ⚙️ Configuration

### Rule Bundles

Rules are defined in YAML files that can be customized:

```yaml
# rules/pandas.yml
meta:
  library: pandas
  alias_regex: "^(pd|pandas)$"

rules:
  - func: drop
    mutation: "row/col drop"
    default_severity: HIGH
    notes: |
      Permanently removes data from DataFrame. Use with caution in production.
    extra_checks:
      arg_present:
        name: inplace
        value: true
        set_severity: CRITICAL
```

### Custom Rules

Add your own rule bundles:

```bash
datamut audit src/ --rules-dir ./custom-rules/
```

### Severity Levels

- **LOW**: Minor operations that change data organization
- **MEDIUM**: Operations that may affect data interpretation  
- **HIGH**: Operations that remove or significantly modify data
- **CRITICAL**: Destructive operations or those with `inplace=True`

## 🔌 Plugin System

Extend DataMut with custom plugins:

```python
# my_plugin.py
def get_visitors():
    from .my_visitor import MyCustomVisitor
    return [MyCustomVisitor]

def get_rule_bundles():
    from pathlib import Path
    return [Path(__file__).parent / "my_rules.yml"]
```

Register in `setup.py`:

```python
setup(
    # ...
    entry_points={
        'datamut.plugins': [
            'my_plugin = my_package.my_plugin'
        ]
    }
)
```

## 🚀 CI/CD Integration

### GitHub Actions

```yaml
- name: Run DataMut Analysis
  run: |
    pip install datamut
    datamut audit src/ --format sarif --output datamut.sarif
    
- name: Upload SARIF
  uses: github/codeql-action/upload-sarif@v2
  with:
    sarif_file: datamut.sarif
```

### Exit Codes

DataMut returns exit code 1 if findings are found with severity >= `--min-severity` (default: MEDIUM).

## 📚 CLI Reference

### Commands

- `datamut audit` - Analyze Python files for mutations
- `datamut list-rules` - Show available detection rules  
- `datamut version` - Show version information

### Options

```bash
datamut audit [OPTIONS] INPUTS...

Options:
  -o, --output PATH        Output file path
  -f, --format [html|json|sarif]  Output format (default: html)
  --min-severity [LOW|MEDIUM|HIGH|CRITICAL]  Minimum severity for exit code
  --rules-dir PATH         Additional custom rules directory
  -v, --verbose           Enable verbose output
  --help                  Show help message
```

## 🧪 Development

### Setup

```bash
git clone https://github.com/your-org/datamut.git
cd datamut
pip install -e ".[dev]"
```

### Testing

```bash
pytest tests/
pytest --cov=datamut tests/
```

### Code Quality

```bash
black datamut/
ruff check datamut/
isort datamut/
```

## 📄 License

MIT License - see [LICENSE](LICENSE) file for details.

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## 🆘 Support

- **Documentation**: [docs/](docs/)
- **Issues**: [GitHub Issues](https://github.com/your-org/datamut/issues)
- **Discussions**: [GitHub Discussions](https://github.com/your-org/datamut/discussions)

## 🏆 Acknowledgments

- Built with [libcst](https://github.com/Instagram/LibCST) for Python AST analysis
- UI powered by [Bootstrap 5](https://getbootstrap.com/) and [htmx](https://htmx.org/)
- CLI built with [Typer](https://typer.tiangolo.com/) and [Rich](https://github.com/Textualize/rich)
